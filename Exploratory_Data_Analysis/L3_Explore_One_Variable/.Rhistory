geom_histogram(binwidth = 0.05, color = 'black', fill = 'orange') +
facet_wrap(~cut, scales = 'free_y')
log10(0.05)
log10(100)
log10(10000)
log10(1000)
10^3
10^3.05
ggplot(data = diamonds, aes(x = price)) +
geom_histogram(binwidth=50, color = 'black', fill = 'orange') +
scale_x_continuous(limits = c(0,3000), breaks = seq(0,3000,250))
ggsave('CheapDiamonds_Histogram.png')
diamonds$price_per_carat <- diamonds$price/diamonds$carat
ggplot(data = diamonds, aes(x = log10(price_per_carat))) +
geom_histogram(binwidth = 0.05, color = 'black', fill = 'orange') +
scale_x_log10() +
facet_wrap(~cut, scales = 'free_y')
diamonds$price_per_carat <- diamonds$price/diamonds$carat
ggplot(data = diamonds, aes(x = price_per_carat)) +
geom_histogram(binwidth = 0.05, color = 'black', fill = 'orange') +
scale_x_log10() +
facet_wrap(~cut, scales = 'free_y')
diamonds$price_per_carat <- diamonds$price/diamonds$carat
ggplot(data = diamonds, aes(x = price_per_carat)) +
geom_histogram(binwidth = 0.05, color = 'black', fill = 'orange') +
scale_x_log10() +
facet_wrap(~cut, scales = 'free_y') +
annotation_logticks()
diamonds$price_per_carat <- diamonds$price/diamonds$carat
ggplot(data = diamonds, aes(x = price_per_carat)) +
geom_histogram(binwidth = 0.05, color = 'black', fill = 'orange') +
scale_x_log10() +
facet_wrap(~cut, scales = 'free_y') +
annotation_logticks(sides = 'b')
# y-axis as counts
p1 <- ggplot(data = subset(pf, !is.na(gender)), aes(x = www_likes)) +
geom_freqpoly(aes(color = gender)) +
scale_x_log10() +
xlab('Likes') +
ylab('Count of users')
# y-axis as counts
p1 <- ggplot(data = subset(pf, !is.na(gender)), aes(x = www_likes)) +
geom_freqpoly(aes(color = gender)) +
scale_x_log10() +
xlab('Likes') +
ylab('Count of users')
# y-axis as proportions... need to add 'y' to aes
p2 <- ggplot(data = subset(pf, !is.na(gender)), aes(x = www_likes, y = ..count../sum(..count..))) +
geom_freqpoly(aes(color = gender)) +
scale_x_log10() +
xlab('Likes') +
ylab('Proportion of users')
grid.arrange(p1, p2)
# y-axis as counts
p1 <- ggplot(data = subset(pf, !is.na(gender)), aes(x = www_likes)) +
geom_freqpoly(aes(color = gender)) +
scale_x_log10() +
xlab('Likes') +
ylab('Count of users')
# y-axis as proportions... need to add 'y' to aes
p2 <- ggplot(data = subset(pf, !is.na(gender)), aes(x = www_likes, y = ..count../sum(..count..))) +
geom_freqpoly(aes(color = gender)) +
scale_x_log10() +
xlab('Likes') +
ylab('Proportion of users')
grid.arrange(p1, p2)
setwd("/Users/GregoryClunies/Repos/Udacity/Exploratory_Data_Analysis/Explore_One_Variable")
setwd("/Users/GregoryClunies/Repos/Udacity/Exploratory_Data_Analysis/Explore_One_Variable")
getwd()
getwd()
list.files()
pf <- read.csv('pseudo_facebook.tsv', sep = '\t')
names(pf)
theme_set(theme_minimal(16))
getwd()
list.files()
pf <- read.csv('pseudo_facebook.tsv', sep = '\t')
names(pf)
View(pf)
setwd("/Users/GregoryClunies/Repos/Udacity/Exploratory_Data_Analysis/Explore_One_Variable")
setwd('/Users/GregoryClunies/Repos/Udacity/Exploratory_Data_Analysis/L3_Explore_One_Variable')
setwd("/Users/GregoryClunies/Repos/Udacity/Exploratory_Data_Analysis/Explore_One_Variable")
setwd("/Users/GregoryClunies/Repos/Udacity/Exploratory_Data_Analysis/L3_Explore_One_Variable")
# macbook path
setwd('/Users/GregoryClunies/Repos/Udacity/Exploratory_Data_Analysis/L4_ProblemSet_ExploreOneVariable')
# windows path
library(ggplot2)  #must load the ggplot package first
data(diamonds)  #loads the diamonds data set since it comes with the ggplot package
summary(diamonds)
str(diamonds)
?diamonds
ggplot(data = diamonds, aes(x = price)) +
geom_histogram()
summary(diamonds$price)
sum(diamonds$price < 500)
sum(diamonds$price < 250)
sum(diamonds$price >= 15000)
ggplot(data = diamonds, aes(x = price)) +
geom_histogram(binwidth=50, color = 'black', fill = 'orange') +
scale_x_continuous(limits = c(0,3000), breaks = seq(0,3000,250))
ggsave('CheapDiamonds_Histogram.png')
ggplot(data = diamonds, aes(x = price)) +
geom_histogram(binwidth = 50, color = 'black', fill = 'orange') +
scale_x_continuous(breaks = seq(0,5000,500), limits = c(0, 5000)) +
facet_wrap(~cut, ncol = 1)
ggplot(data = diamonds, aes(x = price)) +
geom_histogram(binwidth = 50, color = 'black', fill = 'orange') +
scale_x_continuous(breaks = seq(0,5000,500), limits = c(0, 5000)) +
facet_wrap(~cut, ncol = 1)
ggplot(data = diamonds, aes(x = price)) +
geom_histogram(binwidth = 50, color = 'black', fill = 'orange') +
scale_x_continuous(breaks = seq(0,5000,500), limits = c(0, 5000)) +
facet_wrap(~cut, ncol = 1)
by(diamonds$price, diamonds$cut, summary)
# Run the code below in R Studio to generate
# the histogram as a reminder
qplot(x = price, data = diamonds) +
facet_wrap(~cut)
# 'free' the y-axis scales fro each facet
qplot(x = price, data = diamonds) +
facet_wrap(~cut, scales = 'free_y')
diamonds$price_per_carat <- diamonds$price/diamonds$carat
ggplot(data = diamonds, aes(x = price_per_carat)) +
geom_histogram(binwidth = 0.05, color = 'black', fill = 'orange') +
scale_x_log10() +
facet_wrap(~cut, scales = 'free_y') +
annotation_logticks(sides = 'b')
# macbook path
setwd("/Users/GregoryClunies/Repos/Udacity/Exploratory_Data_Analysis/L3_Explore_One_Variable")
getwd()
list.files()
pf <- read.csv('pseudo_facebook.tsv', sep = '\t')
names(pf)
# install.packages('ggplot2')
library(ggplot2)
# install.packages('ggthemes', dependencies = TRUE)
library(ggthemes)
theme_set(theme_minimal(16))
names(pf)
qplot(data = pf, x = dob_day) +
scale_x_continuous(breaks = 1:31)
qplot(data = pf, x = dob_day) +
scale_x_continuous(breaks = 1:31) +
facet_wrap(~dob_month, ncol = 3)
# plot the friend count data
pf <- read.csv('pseudo_facebook.tsv', sep = '\t')
qplot(data = pf, x = friend_count)
# this is the alternate method using ggplot() instead of qplot()
ggplot(data = pf, aes(x = friend_count)) +
geom_histogram()
qplot(data = pf, x = friend_count, xlim = c(0, 1000))
# aleternate solution 1
qplot(data = pf, x = friend_count) +
scale_x_continuous(limits = c(0, 1000))
# alternate solution 2
ggplot(data = pf, aes(x = friend_count)) +
geom_histogram() +
scale_x_continuous(limits = c(0, 1000))
ggplot(data = pf, aes(x = friend_count)) +
geom_histogram(binwidth = 25) +
scale_x_continuous(limits = c(0, 1000), breaks = seq(0,1000,50)) +
facet_wrap(~gender, ncol = 3)
ggplot(data = subset(pf, !is.na(gender)), aes(x = friend_count)) +
geom_histogram(binwidth = 25) +
scale_x_continuous(limits = c(0, 1000), breaks = seq(0,1000,50)) +
facet_wrap(~gender, ncol = 3)
table(pf$gender)
by(pf$friend_count, pf$gender, summary)
ggplot(data = pf, aes(x = tenure/365)) +
geom_histogram(binwidth = 0.5, color = 'black', fill = 'blue')
ggplot(data = pf, aes(x = tenure/365)) +
geom_histogram(binwidth = 0.25, color = 'black', fill = 'blue') +
scale_x_continuous(breaks = seq(1,7,1), limits =c(0,7)) +
xlab('Number of years using Facebook') +
ylab('Number of users in sample')
ggplot(data = pf, aes(x = age)) +
geom_histogram(binwidth = 1, color = 'black', fill = 'orange') +
scale_x_continuous(breaks = seq(0,113,5), limits = c(0,120)) +
xlab('User Age') +
ylab('Number of users in sample')
# install.packages('gridExtra')
library(gridExtra)
# make the individual plots
p1 <- ggplot(data = pf, aes(x = friend_count)) +
geom_histogram(color = 'black', fill = 'blue')
p2 <- p1 + scale_x_log10()
p3 <- p1 + scale_x_sqrt()
grid.arrange(p1, p2, p3, ncol = 1)
# y-axis as counts
p1 <- ggplot(data = subset(pf, !is.na(gender)), aes(x = www_likes)) +
geom_freqpoly(aes(color = gender)) +
scale_x_log10() +
xlab('Likes') +
ylab('Count of users')
# y-axis as proportions... need to add 'y' to aes
p2 <- ggplot(data = subset(pf, !is.na(gender)), aes(x = www_likes, y = ..count../sum(..count..))) +
geom_freqpoly(aes(color = gender)) +
scale_x_log10() +
xlab('Likes') +
ylab('Proportion of users')
grid.arrange(p1, p2)
by(pf$www_likes, pf$gender, sum)
ggplot(data = subset(pf, !is.na(gender)), aes(x = gender, y = friend_count)) +
geom_boxplot() +
scale_y_continuous(limits = c(0,1000))  # using scale_y_continuous() actually removes data BEFORE plotting the boxes
# instead we should use coord_cartesion leayr
ggplot(data = subset(pf, !is.na(gender)), aes(x = gender, y = friend_count)) +
geom_boxplot() +
coord_cartesian(ylim = c(0,1000))
# note that we did not get a warning about removing rows of data this time, like we did when using scale_y_continuous()
# the box plots will have slightly different shape as well since we have not ommitted any data
ggplot(data = subset(pf, !is.na(gender)), aes(x = gender, y = friend_count)) +
geom_boxplot() +
coord_cartesian(ylim = c(0,250))
by(pf$friend_count, pf$gender, summary)
by(diamonss$price , diamonds$cut)
by(diamonds$price , diamonds$cut)
by(diamonds$price , diamonds$cut, summary)
by(diamonds$price , diamonds$cut, summary)
ggplot(data = diamons, aes(x = cut, y = price)) +
geom_boxplot()
by(diamonds$price , diamonds$cut, summary)
ggplot(data = diamonds, aes(x = cut, y = price)) +
geom_boxplot()
by(diamonds$price , diamonds$cut, summary)
ggplot(data = diamonds, aes(x = cut, y = price)) +
geom_boxplot() +
coord_cartesian(ylim = c(0, 7500))
names(diamonds)
View(diamonds)
View(diamonds)
by(diamonds$price, diamonds$color)
by(diamonds$price, diamonds$color, summary)
??diamonds
?diamonds
IQR_D = IQR(diamonds(diamonds$cut == 'D'))
IQR_D = IQR(diamonds[diamonds$cut == 'D'])
IQR_D = IQR(diamonds$price[diamonds$cut == 'D'])
IQR_D = IQR(subset(diamonds, cut == 'D',)$price)
IQR_D <- IQR(subset(diamonds, cut == 'D',)$price)
(subset(diamonds, cut == 'D',)$price)
subset(diamonds, cut == 'D',)$price
subset(diamonds, cut == 'D')$price
subset(diamonds, cut == 'D')
test <- subset(diamonds, cut == 'D')
View(test)
View(test)
View(test)
rm test
rm(test)
subset(diamonds, cut == 'D')
subset(diamonds, cut = 'D')
subset(diamonds, color = 'D')
subset(diamonds, color == 'D')
subset(diamonds, color == 'D')$price
IQR(subset(diamonds, color == 'D')$price)
by(diamonds$price, diamonds$color, summary)
?diamonds
IQR_D = IQR(subset(diamonds, color == 'D')$price)
IQR_D
IQR_J = IQR(subset(diamonds, color == 'J')$price)
IQR_J
ggplot(data = diamonds, aes(x = color, y = price_per_carat)) +
geom_boxplot()
ggplot(data = diamonds, aes(x = color, y = price_per_carat)) +
geom_boxplot() +
coord_cartesian(ylim = c(0,6000))
# y-axis as counts
p1 <- ggplot(data = subset(pf, !is.na(gender)), aes(x = www_likes)) +
geom_freqpoly(aes(color = gender)) +
scale_x_log10() +
xlab('Likes') +
ylab('Count of users')
# y-axis as proportions... need to add 'y' to aes
p2 <- ggplot(data = subset(pf, !is.na(gender)), aes(x = www_likes, y = ..count../sum(..count..))) +
geom_freqpoly(aes(color = gender)) +
scale_x_log10() +
xlab('Likes') +
ylab('Proportion of users')
grid.arrange(p1, p2)
ggplot(data = diamonds, aes(x = carat)) +
geom_freqpoly()
ggplot(data = diamonds, aes(x = carat)) +
geom_freqpoly(aes(color = color))
ggplot(data = diamonds, aes(x = carat)) +
geom_freqpoly() +
scale_x_continuous(binwidth = 10)
ggplot(data = diamonds, aes(x = carat)) +
geom_freqpoly(binwidth = 0.5) +
scale_x_continuous()
ggplot(data = diamonds, aes(x = carat)) +
geom_freqpoly(binwidth = 0.1) +
scale_x_continuous()
ggplot(data = diamonds, aes(x = carat)) +
geom_freqpoly(binwidth = 0.1) +
scale_x_continuous(breaks = seq(0,5,0.1))
ggplot(data = diamonds, aes(x = carat)) +
geom_freqpoly(binwidth = 0.1) +
scale_x_continuous(breaks = seq(0,5,0.2), limits = c(0,5))
ggplot(data = diamonds, aes(x = carat)) +
geom_freqpoly(binwidth = 0.1) +
scale_x_continuous(breaks = seq(0,5,0.2), limits = c(0,5)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data = diamonds, aes(x = carat)) +
geom_freqpoly(binwidth = 0.1) +
scale_x_continuous(breaks = seq(0,5,0.2), limits = c(0,5)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, fontsize=8))
ggplot(data = diamonds, aes(x = carat)) +
geom_freqpoly(binwidth = 0.1) +
scale_x_continuous(breaks = seq(0,5,0.2), limits = c(0,5)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=8))
ggplot(data = diamonds, aes(x = carat)) +
geom_freqpoly(binwidth = 0.1) +
scale_x_continuous(breaks = seq(0,5,0.2), limits = c(0,5)) +
scale_y_continuous(breaks = seq(0,12000,1000)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=8))
knitr::opts_chunk$set(echo = TRUE)
data(mtcars)
install.packages('tidyr')
install.packages('dplyr')
install.packages('dplyr')
# install.packages('tidyr')
library(tidyr)
# install.packages('dplyr')
library(dplyr)
data(mtcars)
View(mtcars)
tbl_df(mtcars)
View(mtcars)
View(mtcars)
tb
str(mtcars)
str(tbl_df(mtcars))
# install.packages('tidyr')
library(tidyr)
# install.packages('dplyr')
library(dplyr)
# load in mtcars dataset (a built in R dataset)
data(mtcars)
# convert the data to a tbl class
table1 <- tbl_df(mtcars)
View(table1)
install.packages("devtools")
devtools::install_github("rstudio/EDAWR")
library(EDAWR)
# install.packages("devtools")
# devtools::install_github("rstudio/EDAWR")
library(EDAWR)
?storms
?cases
?pollution
?tb
storms$storm
storms$wind
caes$country
cases$country
names(cases)[1]
names(cases)[-1]
unlist(cases[1:3, 2:4])
pollution$city[1,3,5]
?gather
?spread
gather(cases)
spread(cases)
spread(cases)
cases
?cases
gather(cases,'2011','2012','2013', key='year', value='cases')
gather(cases, key='year', value='n')
gather(cases,'year', value='n')
gather(cases,'year', value='n', 2:4)
gather(cases,2:4, key='year', value='cases')
gather(cases, key='year', value='n', '2011','2012','2013')
# OR
gather(cases key='year', value='n',  2:4,)
# OR
gather(cases, key='year', value='n',  2:4)
library(tidyr)
?gather
?spread
cases
gather(cases, key='year', value='n', '2011','2012','2013')
# OR
gather(cases, key='year', value='n',  2:4)  # this seems preferable if a lot of columns to be "gathered"
?pollution
pollution
spread(pollution, 'size', 'amount')
spread(pollution, key = 'size', value = 'amount')
# OR
gather(cases, key = 'year', value = 'n',  2:4)  # this seems preferable if a lot of columns to be "gathered"
spread(pollution, key = 'size', value = 'amount')
pollution
pollution <- spread(pollution, key = 'size', value = 'amount')
gather(pollution, key = 'size', value = 'amount', 2:3)
pollution
pollution
gather(pollution, key = 'size', value = 'amount', 2:3)
library(EDAWR)
?pollution
pollution
pollution <- spread(pollution, key = 'size', value = 'amount')
pollution <- spread(pollution, key = 'size', value = 'amount')
pollution
# install.packages('tidyr')
library(tidyr)
# install.packages('dplyr')
library(dplyr)
# load in mtcars dataset (a built in R dataset)
data(mtcars)
# convert the data to a tbl class
table1 <- tbl_df(mtcars)
View(table1)  # view data in spreadsheet-like display (note capital V)
# install.packages("devtools")
# devtools::install_github("rstudio/EDAWR")
library(EDAWR)
?storms
?cases
?pollution
?tb
library(tidyr)
?gather
?spread
cases
gather(cases, key='year', value='n', '2011','2012','2013')
# OR
gather(cases, key = 'year', value = 'n',  2:4)  # this seems preferable if a lot of columns to be "gathered"
library(EDAWR)
?pollution
pollution
pollution <- spread(pollution, key = 'size', value = 'amount')
gather(pollution, key = 'size', value = 'amount', 2:3)
pollution_g <- spread(pollution, key = 'size', value = 'amount')
pollution
pollution
pollution
?pollution
?pollution
# install.packages("devtools")
# devtools::install_github("rstudio/EDAWR")
library(EDAWR)
?storms
?cases
?pollution
?tb
pollution
pollution
pollution_g <- spread(pollution, 'size', value = 'amount')
gather(pollution_g, key = 'size', value = 'amount', 2:3)
pollution_g
gather(pollution_g, key = 'size', value = 'amount', 2:3)
storms
separate(storms, date, into = c("year", "month", "day"), sep = "-")
?pollution
pollution
# spread example
pollution2 <- spread(pollution, 'size', value = 'amount')
pollution2
# inverse of spread is gather!
gather(pollution2, key = 'size', value = 'amount', 2:3)
storms
# notice that there are still some variables "hidden" in this dataset (year, month, day)
separate(storms, date, into = c("year", "month", "day"), sep = "-")
# now we have year, month, day as separate variables
unite(storms2, "date", year, month, day, sep='-')
storms
storms2 <- separate(storms, date, into = c("year", "month", "day"), sep = "-")
unite(storms2, "date", year, month, day, sep='-')
stroms2
storms2
library(dplyr)
?select
?filter
?arrange
?mutate
?summarise
?group_by
storms
select(storms, storm, pressure)
select(storms -storm)
select(storms, -storm)
select(storms, wind:date)
filter(storms, wind >= 50)
filter(storms, wind>= 5-, storm %in% c("Alberto", "Alex", "Allison"))
filter(storms, wind>= 50, storm %in% c("Alberto", "Alex", "Allison"))
storms
mutate(storms, ratio = pressure/wind)
mutate(storms, ratio = pressure/wind, inverse = ratio^-1)
pollution %>% summarise(mean = mean(amount), sum = um(amount), n = n())
pollution %>% summarise(mean = mean(amount), sum = sum(amount), n = n())
summarise(pollution, mean = mean(amount), sum = sum(amount), n = n())
arrange(storms, wind)
storms
arrange(storms, wind)
arrange(storms, desc(wind))
arrange(storms, wind, date)
arrange(storms, wind)
arrange(storms, desc(wind), date)
arrange(storms, wind)
arrange(storms, wind, date)
select(storms, storm, pressure)  # THIS, is the same as....
storms %>% select(storm, pressure)  # THIS
# this pipe operator can help us "chain" operations together
storms %>%
mutate(ratio = pressure / wind) %>%
select(storm, ratio)
pollution %>% group_by(city)
pollution %>%
group_by(city) %>%
summarise(mean = mean(amount), sum = sum(amount), n = n())
pollution
pollution %>% ungroup()
?ungroup
