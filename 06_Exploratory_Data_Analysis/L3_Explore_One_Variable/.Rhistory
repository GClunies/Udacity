xor(!!TRUE, !!FALSE)
!!TRUE
!TRUE
!!FALSE
!FALSE
!!FALSE
set.seed(345)
Sector <- rep(c("S01","S02","S03","S04","S05","S06","S07"),times=7)
Year <- as.numeric(rep(c("1950","1960","1970","1980","1990","2000","2010"),each=7))
Value <- runif(49, 10, 100)
data <- data.frame(Sector,Year,Value)
View(data)
View(data)
# macbook path
setwd("/Users/GregoryClunies/Repos/Udacity/Exploratory_Data_Analysis/L3_Explore_One_Variable")
pf <- read.csv('pseudo_facebook.tsv', sep = '\t')
names(pf)
# install.packages('ggplot2')
library(ggplot2)
# install.packages('ggthemes', dependencies = TRUE)
library(ggthemes)
theme_set(theme_minimal(16))
names(pf)
qplot(data = pf, x = dob_day) +
scale_x_continuous(breaks = 1:31)
View(pf)
View(pf)
# this is the alternate method using ggplot() instead of qplot()
ggplot(data = pf, aes(x = friend_count)) +
geom_histogram()
ggplot(data = subset(pf, !is.na(gender)), aes(x = friend_count)) +
geom_histogram(binwidth = 25) +
scale_x_continuous(limits = c(0, 1000), breaks = seq(0,1000,50)) +
facet_wrap(~gender, ncol = 3)
ggplot(data = pf, aes(x = friend_count)) +
geom_histogram(binwidth = 25) +
scale_x_continuous(limits = c(0, 1000), breaks = seq(0,1000,50)) +
facet_wrap(~gender, ncol = 3)
ggplot(data = pf, aes(x = friend_count)) +
geom_histogram(binwidth = 25) +
scale_x_continuous(limits = c(0, 1000), breaks = seq(0,1000,50)) +
facet_wrap(~gender)
ggplot(data = subset(pf, !is.na(gender)), aes(x = friend_count)) +
geom_histogram(binwidth = 25) +
scale_x_continuous(limits = c(0, 1000), breaks = seq(0,1000,50)) +
facet_wrap(~gender)
table(pf$gender)
by(pf$friend_count, pf$gender, summary)
ggplot(data = pf, aes(x = tenure/365)) +
geom_histogram(binwidth = 0.5, color = 'black', fill = 'blue')
ggplot(data = pf, aes(x = tenure/365)) +
geom_histogram(binwidth = 0.25, color = 'black', fill = 'blue') +
scale_x_continuous(breaks = seq(1,7,1), limits =c(0,7)) +
xlab('Number of years using Facebook') +
ylab('Number of users in sample')
ggplot(data = pf, aes(x = age)) +
geom_histogram(binwidth = 1, color = 'black', fill = 'orange') +
scale_x_continuous(breaks = seq(0,113,5), limits = c(0,120)) +
xlab('User Age') +
ylab('Number of users in sample')
grid.arrange(p1, p2, p3, ncol = 1)
# install.packages('gridExtra')
library(gridExtra)
# make the individual plots
p1 <- ggplot(data = pf, aes(x = friend_count)) +
geom_histogram(color = 'black', fill = 'blue')
p2 <- p1 + scale_x_log10()
p3 <- p1 + scale_x_sqrt()
grid.arrange(p1, p2, p3, ncol = 1)
# y-axis as counts
p1 <- ggplot(data = subset(pf, !is.na(gender)), aes(x = www_likes)) +
geom_freqpoly(aes(color = gender)) +
scale_x_log10() +
xlab('Likes') +
ylab('Count of users')
# y-axis as proportions... need to add 'y' to aes
p2 <- ggplot(data = subset(pf, !is.na(gender)), aes(x = www_likes, y = ..count../sum(..count..))) +
geom_freqpoly(aes(color = gender)) +
scale_x_log10() +
xlab('Likes') +
ylab('Proportion of users')
grid.arrange(p1, p2)
ggplot(data = subset(pf, !is.na(gender)), aes(x = gender, y = friend_count)) +
geom_boxplot() +
scale_y_continuous(limits = c(0,1000))  # using scale_y_continuous() actually removes data BEFORE plotting the boxes
# instead we should use coord_cartesion leyer
ggplot(data = subset(pf, !is.na(gender)), aes(x = gender, y = friend_count)) +
geom_boxplot() +
coord_cartesian(ylim = c(0,1000))
# note that we did not get a warning about removing rows of data this time, like we did when using scale_y_continuous()
# the box plots will have slightly different shape as well since we have not ommitted any data
ggplot(data = subset(pf, !is.na(gender)), aes(x = gender, y = friend_count)) +
geom_boxplot() +
coord_cartesian(ylim = c(0,250))
by(pf$friend_count, pf$gender, summary)
ggplot(data = subset(pf, !is.na(gender)), aes(x = gender, y = friendships_initiated)) +
geom_boxplot() +
coord_cartesian(ylim = c(0,150))
by(pf$friendships_initiated, pf$gender, summary)
# create mobile_check_in variable
pf$mobile_check_in <- NA  # assign column of NA's to dataframe
pf$mobile_check_in <- ifelse(pf$mobile_likes > 0, 1, 0)
pf$mobile_check_in <- factor(pf$mobile_check_in)  # convert to a factor
summary(pf$mobile_check_in)
p_mobile <- sum(pf$mobile_check_in == 1)/length(pf$mobile_check_in)
p_mobile
rm(all)
